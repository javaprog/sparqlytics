// SPARQLytics: Multidimensional Analytics for RDF Data.
// Copyright (C) 2015  Michael Rudolf
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

options {
    JAVA_UNICODE_ESCAPE = true;
    STATIC = false;
}

PARSER_BEGIN(SPARQLyticsParser)
package de.tud.inf.db.sparqlytics.parser;

import com.hp.hpl.jena.sparql.core.Var;
import com.hp.hpl.jena.sparql.expr.Expr;
import com.hp.hpl.jena.sparql.lang.sparql_11.SPARQLParser11;
import com.hp.hpl.jena.sparql.lang.sparql_11.SPARQLParser11TokenManager;
import com.hp.hpl.jena.sparql.syntax.Element;
import de.tud.inf.db.sparqlytics.model.*;
import de.tud.inf.db.sparqlytics.olap.*;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

/**
 * Parses SPARQLytics commands. 
 *
 * @author Michael Rudolf
 */
public class SPARQLyticsParser {
    /**
     * Used for executing SPARQLytics commands.
     */
    private final Session session = new Session();

    /**
     * Whether the parser is in interactive mode.
     */
    private boolean interactive;

    /**
     * Returns the session used for executing SPARQLytics commands.
     */
    public Session getSession() {
        return session;
    }

    /**
     * Returns whether the parser is in interactive mode.
     *
     * @see #setInteractive
     */
    public boolean isInteractive() {
        return interactive;
    }

    /**
     * Sets whether the parser is in interactive mode.
     *
     * @see #isInteractive
     */
    public void setInteractive(final boolean interactive) {
        this.interactive = interactive;
    }

    /**
     * Delegates parsing to a nested SPARQL parser, but one that will
     * use the JavaCharStream that the current parser is using.
     *
     * @param rule the SPARQL grammar rule to invoke
     * @return the result of the SPARQL grammar rule invocation
     * @throws ParseException if parsing fails on the given input
     */
    protected <T> T delegate(final SPARQLRule<T> rule) throws ParseException {
        // create a SPARQL parser that we will delegate to
        JavaCharStreamAdapter adapter = new JavaCharStreamAdapter(jj_input_stream);
        SPARQLParser11TokenManager tm = new SPARQLParser11TokenManager(adapter);
        SPARQLParser11 parser = new SPARQLParser11(tm);
        try {
            Field allowAggregatesInExpressions =
                    parser.getClass().getDeclaredField("allowAggregatesInExpressions");
            allowAggregatesInExpressions.setAccessible(true);
            allowAggregatesInExpressions.setBoolean(parser, true);
        } catch (NoSuchFieldException ex) {
            throw new AssertionError(ex);
        } catch (IllegalAccessException ex) {
            throw new AssertionError(ex);
        }

        // the parser fills in an empty query template
        parser.setQuery(session.getQuery());

        T result;
        try {
            // parse to the end of the query
            result = rule.execute(parser);

            // maybe push back the last tokens, which the sparql parser will
            // have consumed to know that the query was finished
            com.hp.hpl.jena.sparql.lang.sparql_11.Token token = parser.token;
            while ((token = token.next) != null) {
                jj_input_stream.backup(token.image == null ?
                    token.endColumn - token.beginColumn : token.image.length());
            }
        } catch (com.hp.hpl.jena.sparql.lang.sparql_11.ParseException ex) {
            throw (ParseException) new ParseException(
                    ex.getLocalizedMessage()).initCause(ex);
        } catch (com.hp.hpl.jena.sparql.lang.sparql_11.TokenMgrError ex) {
            throw (TokenMgrError) new TokenMgrError(ex.getLocalizedMessage(),
                    TokenMgrError.LEXICAL_ERROR).initCause(ex);
        }

        return result;
    }

    /**
     * Interface for code that invokes SPARQL grammar rules.
     *
     * @param <T> the type of the invoked rule's return value
     */
    protected static interface SPARQLRule<T> {
        /**
         * Executes the SPARQL grammar rule on the given SPARQL parser.
         *
         * @param parser the SPARQL parser to invoke the grammar rule on
         * @return the result of the SPARQL grammar rule invocation
         * @throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException
         *         if parsing fails on the given input
         */
        public T execute(SPARQLParser11 parser) 
            throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException;
    }

    /**
     * Invokes the <code>&lt;ConditionalOrExpression&gt;</code> SPARQL grammar rule.
     */
    private static class ConditionalOrExpressionRule implements SPARQLRule<Expr> {
        @Override
        public Expr execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            return parser.ConditionalOrExpression();
        }
    }

    /**
     * Invokes the <code>&lt;DatasetClause&gt;</code> SPARQL grammar rule.
     */
    private static class DatasetClauseRule implements SPARQLRule<Void> {
        @Override
        public Void execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            parser.DatasetClause();
            return null;
        }
    }

    /**
     * Invokes the <code>&lt;GroupGraphPattern&gt;</code> SPARQL grammar rule.
     */
    private static class GroupGraphPatternRule implements SPARQLRule<Element> {
        @Override
        public Element execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            return parser.GroupGraphPattern();
        }
    }

    /**
     * Invokes the <code>&lt;Integer&gt;</code> SPARQL grammar rule.
     */
    private static class IntegerRule implements SPARQLRule<Long> {
        @Override
        public Long execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            return parser.Integer();
        }
    }

    /**
     * Invokes the <code>&lt;IRIREF&gt;</code> SPARQL grammar rule.
     */
    private static class IRIREFRule implements SPARQLRule<String> {
        @Override
        public String execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            return parser.IRIREF();
        }
    }

    /**
     * Invokes the <code>&lt;NumericExpression&gt;</code> SPARQL grammar rule.
     */
    private static class NumericExpressionRule implements SPARQLRule<Expr> {
        @Override
        public Expr execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            return parser.NumericExpression();
        }
    }

    /**
     * Invokes the <code>&lt;PrimaryExpression&gt;</code> SPARQL grammar rule.
     */
    private static class PrimaryExpressionRule implements SPARQLRule<Expr> {
        @Override
        public Expr execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            return parser.PrimaryExpression();
        }
    }

    /**
     * Invokes the <code>&lt;Prologue&gt;</code> SPARQL grammar rule.
     */
    private static class PrologueRule implements SPARQLRule<Void> {
        @Override
        public Void execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            parser.Prologue();
            return null;
        }
    }

    /**
     * Invokes the <code>&lt;String&gt;</code> SPARQL grammar rule.
     */
    private static class StringRule implements SPARQLRule<String> {
        @Override
        public String execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            return parser.String();
        }
    }

    /**
     * Invokes the <code>&lt;TriplesBlock&gt;</code> SPARQL grammar rule.
     */
    private static class TriplesBlockRule implements SPARQLRule<Element> {
        @Override
        public Element execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            return parser.TriplesBlock(null);
        }
    }

    /**
     * Invokes the <code>&lt;Var&gt;</code> SPARQL grammar rule.
     */
    private static class VarRule implements SPARQLRule<Var> {
        @Override
        public Var execute(final SPARQLParser11 parser)
                throws com.hp.hpl.jena.sparql.lang.sparql_11.ParseException {
            return parser.Var();
        }
    }
}

PARSER_END(SPARQLyticsParser)

/* Token definitions */
SKIP :
{
     " "
  |  "\r"
  |  "\t"
  |  "\n"
}

TOKEN :
{
    < SELECT: "SELECT" >
  | < FACTS: "FACTS" >
  | < DEFINE: "DEFINE" >
  | < DIMENSION: "DIMENSION" >
  | < FROM: "FROM" >
  | < WITH: "WITH" >
  | < LEVEL: "LEVEL" >
  | < AS: "AS" >
  | < MEASURE: "MEASURE" >
  | < WHERE: "WHERE" >
  | < CREATE: "CREATE" >
  | < CUBE: "CUBE" >
  | < OVER: "OVER" >
  | < SLICE: "SLICE" >
  | < DICE: "DICE" >
  | < RESET: "RESET" >
  | < FILTER: "FILTER" >
  | < ROLLUP: "ROLLUP" >
  | < DRILLDOWN: "DRILLDOWN" >
  | < COMPUTE: "COMPUTE" >
  | < EXIT: "EXIT" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < COMMA: "," >
  | < SEMI: ";" >
}

/* Parser grammar rules */
void Start() : {}
{
  CubeDefinition()
  (OLAPOperation())*
}

void CubeDefinition() :
{
  CubeBuilder cubeBuilder;
}
{
  Prologue()
  DatasetClause()
  cubeBuilder = FactSelection()
  (<DEFINE> (DefineDimension(cubeBuilder) | DefineMeasure(cubeBuilder)))+
  CreateCube(cubeBuilder)
}

CubeBuilder FactSelection() :
{
  Element pattern;
}
{
  <SELECT> <FACTS> pattern = GroupGraphPattern() <SEMI>
  {
    return new CubeBuilder("", pattern);
  }
}

void DefineDimension(CubeBuilder cubeBuilder) :
{
  String name;
  Element seedPattern;
  List<Level> levels = new ArrayList<Level>();
  Level level;
}
{
  <DIMENSION> name = String()
  <FROM> <LPAREN> seedPattern = TriplesBlock() <RPAREN>
  <WITH> <LPAREN> level = Level()
  { levels.add(level); }
  ( <COMMA> level = Level() { levels.add(level); } )*
  <RPAREN> <SEMI>
  {
    cubeBuilder.addDimension(new Dimension(name, seedPattern, levels));
  }
}

Level Level() :
{
  String name;
  Expr expression;
}
{
  <LEVEL> name = String() <AS> expression = NumericExpression()
  { return new Level(name, expression); }
}

void DefineMeasure(CubeBuilder cubeBuilder) :
{
  String name;
  Expr expression;
  Element seedPattern;
  String aggregationFunction;
}
{
  <MEASURE> name = String() <AS> expression = NumericExpression()
  <WHERE> <LPAREN> seedPattern = TriplesBlock() <RPAREN>
  <WITH> aggregationFunction = String() <SEMI>
  {
    cubeBuilder.addMeasure(
            new Measure(name, seedPattern, expression, aggregationFunction));
  }
}

void CreateCube(CubeBuilder cubeBuilder) :
{
  String url;
}
{
  <CREATE> <CUBE> <OVER> url = IRIREF() <SEMI>
  {
    session.setCube(cubeBuilder.build());
    session.setSPARQLEndpointURL(url);
  }
}

boolean OLAPOperation() : {}
{
  try {
      (Slice() | Dice() | ResetFilter() | RollUp() | DrillDown() | ComputeMeasures())
      { return true; }
    | <EXIT> <SEMI>
      { return false; }
  } catch (ParseException ex) {
    if (!interactive) {
      throw ex;
    }
    System.err.println(ex.getMessage());
    while (true) {
      switch (getNextToken().kind) {
        case SEMI: return true;
      }
    }
  }
}

void Slice() :
{
  String dimension;
  String level;
  Expr value;
}
{
  <SLICE> <LPAREN> dimension = String() <COMMA>
                   level = String() <COMMA>
                   value = PrimaryExpression() <RPAREN> <SEMI>
  {
    session.execute(new Slice(dimension, level, value));
  }
}

void Dice() :
{
  String dimension;
  String level;
  Var variable;
  Expr predicate;
}
{
  <DICE> <LPAREN> dimension = String() <COMMA>
                  level = String() <AS> variable = Var() <COMMA>
                  predicate = ConditionalOrExpression() <RPAREN> <SEMI>
  {
    session.execute(new Dice(dimension, level, new Filter(variable, predicate)));
  }
}

void ResetFilter() : 
{
  String dimension;
  String level;
}
{
  <RESET> <FILTER> dimension = String() <COMMA>
                   level = String() <LPAREN> <RPAREN> <SEMI>
  {
    session.execute(new ResetFilter(dimension, level));
  }
}

void RollUp() :
{
  String name;
  Long steps;
}
{
  <ROLLUP> <LPAREN> name = String() <COMMA> steps = Integer() <RPAREN> <SEMI>
  {
    session.execute(new RollUp(name, steps.intValue()));
  }
}

void DrillDown() :
{
  String name;
  Long steps;
}
{
  <DRILLDOWN> <LPAREN> name = String() <COMMA> steps = Integer() <RPAREN> <SEMI>
  {
    session.execute(new DrillDown(name, steps.intValue()));
  }
}

void ComputeMeasures() :
{
  List<Measure> measures = new ArrayList<Measure>();
  String name;
}
{
  <COMPUTE> <LPAREN> name = String()
  { measures.add(session.getCube().findMeasure(name)); }
  (<COMMA> name = String()
    { measures.add(session.getCube().findMeasure(name)); }
  )* <RPAREN> <SEMI>
  {
    session.execute(new Compute(measures));
  }
}

/* SPARQL grammar rule delegates */
void DatasetClause() : {}
{
  // Manually lookahead to implement optionality, LOOKAHEAD hint does not work
  // because rule matches empty string
  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      delegate(new DatasetClauseRule());
      break;
    default:
      jj_la1[0] = jj_gen;
      break;
    }
  }
}

void Prologue() : {}
{
  { delegate(new PrologueRule()); }
}

Element GroupGraphPattern() : {}
{
  { return delegate(new GroupGraphPatternRule()); }
}

String String() : {}
{
  { return delegate(new StringRule()); }
}

Element TriplesBlock() : {}
{
  { return delegate(new TriplesBlockRule()); }
}

Expr NumericExpression() : {}
{
  { return delegate(new NumericExpressionRule()); }
}

String IRIREF() : {}
{
  { return delegate(new IRIREFRule()); }
}

Expr PrimaryExpression() : {}
{
  { return delegate(new PrimaryExpressionRule()); }
}

Var Var() : {}
{
  { return delegate(new VarRule()); }
}

Expr ConditionalOrExpression() : {}
{
  { return delegate(new ConditionalOrExpressionRule()); }
}

Long Integer() : {}
{
  { return delegate(new IntegerRule()); }
}
